module BreakingCode
  def code_break (code, guess)
    @sign_arr = []
    0.upto(3) do |num|
      if code[num].to_i == guess[num].to_i then @sign_arr.push("!")
      elsif code.none? {|try| try.to_i == guess[num].to_i } then @sign_arr.push("_")
      else @sign_arr.push("?") end
    end
    puts @sign_arr.join
  end
end

puts"Would you like to be code maker or breaker"
choice = gets.chomp

class Player
  include BreakingCode
  def make_code
    puts "Pick 4 numbers to be your code"
    $code = gets.chomp.split("")
  end

  def break_code
    puts "Try to break the code"
    $code_guess = gets.chomp
  end
end

class Computer
  include BreakingCode
  def initialize
    @is_changing = 0
    $code_arr = []
    @do_not_use_arr = []
    0.upto(3) {$code_arr.push(rand(1..9))}
  end

  def comp_cont_break
    @index_arr = []
    @sign_arr.each_with_index do |sign, inx| 
      if sign == "_" 
        @do_not_use_arr.push($code_arr[inx])
        until @do_not_use_arr.any? {|wrong_num| wrong_num != $code_arr[inx]}
          $code_arr[inx]  = rand(1..9) end
      end
    end
    @sign_arr.each_with_index do |element, index| 
      if element != "!" then @index_arr.push(index)end
    end
    @shuffled_arr = @index_arr.shuffle
    if @index_arr.length > 2 && @is_changing < 4
      0.upto(@index_arr.length - 1) do |num| 
        $code_arr[@index_arr[num]], $code_arr[@shuffled_arr[num]] = $code_arr[@shuffled_arr[num]], $code_arr[@index_arr[num]] 
        @is_changing += 1
      end
    elsif @index_arr.length == 2 && @is_changing < 4
      $code_arr[@index_arr[0]], $code_arr[@index_arr[1]] = $code_arr[@index_arr[1]], $code_arr[@index_arr[0]]
      @is_changing += 1
    elsif @index_arr.length > 0
      @index_arr.each {|num|$code_arr[num] = rand(1..9)}
      @is_changing = 0 end
    puts $code_arr.join
  end
end

comp = Computer.new
player = Player.new
if choice.to_s == "maker"
  player.make_code
  num_of_guesses = 0
  while $code != $code_arr.join &&  num_of_guesses  < 12
    comp.code_break($code, $code_arr)
    comp.comp_cont_break
    num_of_guesses += 1
  end
elsif choice.to_s == "breaker" then
  num_of_guesses = 0
  while $code_arr.join != $code_guess &&  num_of_guesses  < 12
    player.break_code 
    player.code_break($code_arr, $code_guess.split(""))
    num_of_guesses += 1
  end
end