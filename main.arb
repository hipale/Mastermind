module BreakingCode
  def initialize
    puts @code_arr.join
    0.upto(3) do |num|
      if $code[num].to_i == @code_arr[num].to_i then @sign_arr.push("!")
      elsif $code.none? {|code| code.to_i == @code_arr[num].to_i } then @sign_arr.push("o")
      else @sign_arr.push("~") end
    end
    puts @sign_arr.join
  end
end

puts"Would you like to be code maker or breaker"
choice = gets.chomp

class Player
  def make_code
    puts "Pick 4 numbers to be your code"
    $code = gets.chomp.split("")
  end

  def break_code
    puts "Try to break the code"
    code_guess = gets.chomp.split
  end
end

class Computer
  include BreakingCode
  def initialize
    @code_arr = []
    @sign_arr = []
    i = 0
    @num_of_guesses = 0
    while i < 4
      @code_arr.push(rand(1..9)) 
      i += 1
    end
  end

  def comp_break
   
  end

  def comp_cont_break
    while $code != @code_arr && @num_of_guesses  < 12
      0.upto(3) do |num|
        if @sign_arr[num] == "o" then @code_arr[num] = rand(1..9) end
      end
      @num_of_guesses += 1
      puts @code_arr.join
    end
  end
end

comp = Computer.new
player = Player.new
if choice.to_s == "maker"
  player.make_code
  comp.comp_break 
  comp.comp_cont_break
elsif choice.to_s == "breaker" then player.break_code end